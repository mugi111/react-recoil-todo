{"version":3,"sources":["Recoil/atom.ts","InputForm.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["todoAtomState","atom","key","default","InputForm","useState","state","setState","setTodo","useSetRecoilState","onChange","val","target","value","onClick","oldState","name","finished","TodoList","todo","useRecoilValue","style","listStyle","map","type","targetVal","index","findIndex","item","newTodo","slice","statusChanged","textDecoration","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAQeA,EALOC,YAAc,CAChCC,IAAK,WACLC,QAAS,KCoBEC,EApBG,WAAO,IAAD,EACIC,mBAAiB,IADrB,mBACfC,EADe,KACRC,EADQ,KAEhBC,EAAUC,YAA2BT,GAC3C,OACE,oCACE,2BAAOU,SAAU,SAACC,GAAD,OAASJ,EAASI,EAAIC,OAAOC,UAC9C,4BACEC,QAAS,kBACPN,GAAQ,SAACO,GAAD,4BACHA,GADG,CAEN,CAAEC,KAAMV,EAAOW,UAAU,UAJ/B,S,OC2BSC,EAjCE,WACf,IAAMC,EAAgBC,YAAwBpB,GACxCQ,EAAUC,YAA2BT,GAS3C,OACE,wBAAIqB,MAAO,CAAEC,UAAW,SACrBH,EAAKI,KAAI,SAACZ,GACT,OACE,4BACE,2BAAOa,KAAK,WAAWd,SAAU,kBAZrB,SAACe,GACrB,IAAMC,EAAQP,EAAKQ,WAAU,SAACC,GAAD,OAAiBA,IAASH,KACjDI,EAAc,eAAQV,EAAKO,GAAb,CAAqBT,UAAWQ,EAAUR,WAE9DT,EAAQ,GAAD,mBAAKW,EAAKW,MAAM,EAAGJ,IAAnB,CAA2BG,GAA3B,YAAuCV,EAAKW,MAAMJ,EAAQ,MAQlBK,CAAcpB,MACrD,0BACEU,MACEV,EAAIM,SACA,CAAEe,eAAgB,gBAClB,CAAEA,eAAgB,SAGvBrB,EAAIK,YCfJiB,G,MATH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7f7eab07.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\nimport { ITodo } from '../Types';\r\n\r\nconst todoAtomState = atom<ITodo[]>({\r\n    key: \"todoAtom\",\r\n    default: [],\r\n  });\r\n\r\nexport default todoAtomState;","import React, { useState } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport todoAtomState from \"./Recoil/atom\";\r\nimport { ITodo } from \"./Types\";\r\n\r\nconst InputForm = () => {\r\n  const [state, setState] = useState<string>(\"\");\r\n  const setTodo = useSetRecoilState<ITodo[]>(todoAtomState);\r\n  return (\r\n    <>\r\n      <input onChange={(val) => setState(val.target.value)}></input>\r\n      <button\r\n        onClick={() =>\r\n          setTodo((oldState: ITodo[]) => [\r\n            ...oldState,\r\n            { name: state, finished: false },\r\n          ])\r\n        }\r\n      >\r\n        Add\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n","import React from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport todoAtomState from \"./Recoil/atom\";\r\nimport { ITodo } from \"./Types\";\r\n\r\nconst TodoList = () => {\r\n  const todo: ITodo[] = useRecoilValue<ITodo[]>(todoAtomState);\r\n  const setTodo = useSetRecoilState<ITodo[]>(todoAtomState);\r\n\r\n  const statusChanged = (targetVal: ITodo) => {\r\n    const index = todo.findIndex((item: ITodo) => item === targetVal);\r\n    const newTodo: ITodo = { ...todo[index], finished: !targetVal.finished };\r\n\r\n    setTodo([...todo.slice(0, index), newTodo, ...todo.slice(index + 1)]);\r\n  };\r\n\r\n  return (\r\n    <ul style={{ listStyle: \"none\" }}>\r\n      {todo.map((val) => {\r\n        return (\r\n          <li>\r\n            <input type=\"checkbox\" onChange={() => statusChanged(val)}></input>\r\n            <span\r\n              style={\r\n                val.finished\r\n                  ? { textDecoration: \"line-through\" }\r\n                  : { textDecoration: \"none\" }\r\n              }\r\n            >\r\n              {val.name}\r\n            </span>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport InputForm from \"./InputForm\";\r\nimport TodoList from \"./TodoList\";\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <InputForm />\r\n      <TodoList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { RecoilRoot } from 'recoil';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}